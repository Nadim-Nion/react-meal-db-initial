{"version":3,"sources":["logo.svg","components/Meal/Meal.js","components/OrderList/OrderList.js","components/Restaurant/Restaurant.js","utilities/fakedb.js","components/Header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Meal","props","meal","handleAddToOrder","strMeal","strInstructions","strMealThumb","className","src","alt","slice","onClick","OrderList","orders","count","quantity","Restaurant","useState","meals","setMeals","setOrders","useEffect","fetch","then","res","json","data","storedOrder","shoppingCart","storedCart","localStorage","getItem","JSON","parse","getStoredCart","savedOrders","id","addedOrder","find","idMeal","push","selectedMeal","newOrders","existedMeal","restMeal","filter","newQuantity","setItem","stringify","addToDb","map","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d90dcf01.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport './Meal.css';\r\n\r\nconst Meal = (props) => {\r\n    // console.log(props);\r\n    const { meal, handleAddToOrder } = props;\r\n    const { strMeal, strInstructions, strMealThumb } = meal;\r\n\r\n    return (\r\n        <div className=\"meal\">\r\n            <img src={strMealThumb} alt=\"\" />\r\n            <h4>{strMeal}</h4>\r\n            <p>{strInstructions.slice(0, 100)}</p>\r\n            <button onClick={() => handleAddToOrder(meal)}>Add this Food</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Meal;","import React from 'react';\r\n\r\nconst OrderList = (props) => {\r\n    const { orders } = props;\r\n\r\n    let count = 0;\r\n    for (const meal of orders) {\r\n        count = count + meal.quantity;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Order List</h2>\r\n            <h4>Items Ordered: {count}</h4>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderList;","import React, { useEffect, useState } from 'react';\r\nimport Meal from '../Meal/Meal';\r\nimport OrderList from '../OrderList/OrderList';\r\nimport './Restaurant.css';\r\nimport { addToDb, getStoredCart } from '../../utilities/fakedb';\r\n\r\nconst Restaurant = () => {\r\n    const [meals, setMeals] = useState([]);\r\n    const [orders, setOrders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch('https://www.themealdb.com/api/json/v1/1/search.php?s=fish')\r\n            .then(res => res.json())\r\n            .then(data => setMeals(data.meals));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const storedOrder = getStoredCart();\r\n        const savedOrders = [];\r\n        for (const id in storedOrder) {\r\n            const addedOrder = meals.find(meal => meal.idMeal === id);\r\n            if (addedOrder) {\r\n                const quantity = storedOrder[id];\r\n                addedOrder.quantity = quantity;\r\n                savedOrders.push(addedOrder);\r\n            }\r\n\r\n        }\r\n        setOrders(savedOrders);\r\n    }, [meals]);\r\n\r\n    const handleAddToOrder = selectedMeal => {\r\n        // console.log(meal);\r\n        let newOrders = [];\r\n        const existedMeal = orders.find(meal => meal.idMeal === selectedMeal.idMeal);\r\n        if (existedMeal) {\r\n            const restMeal = orders.filter(meal => meal.idMeal !== selectedMeal.idMeal);\r\n            existedMeal.quantity = existedMeal.quantity + 1;\r\n            newOrders = [...restMeal, existedMeal];\r\n        }\r\n        else {\r\n            selectedMeal.quantity = 1;\r\n            newOrders = [...orders, selectedMeal];\r\n\r\n        }\r\n\r\n        setOrders(newOrders);\r\n        addToDb(selectedMeal.idMeal);\r\n\r\n    }\r\n    /* \r\n        The above api link or the below method will now work for search. \r\n        if you want to implement search in this code. \r\n        1. add a input field \r\n        2. declare a state to keep search field text\r\n        3. Make meal loading api to dependant on search text\r\n        4. change the meal loading api.you will get the right api link on their website.\r\n        5. make the meal loading api dynamic using template string. \r\n        6. Also, the useEffect below will not work. Because, search result might not include the meals previously added to the cart\r\n        7. in that case, for each mealId, you have to load the meal from the api (you will find a new pai to load meal by Id) and then add them to the order state.\r\n        ---------------  \r\n        Read carefully, give it a try. [ Ki ache jibone]\r\n        if  you need help, let us know in the support session\r\n    */\r\n\r\n\r\n    return (\r\n        <div className=\"restaurant-menu\">\r\n            <div className=\"meals-container\">\r\n                {\r\n                    meals.map(meal => <Meal\r\n                        key={meal.idMeal}\r\n                        meal={meal}\r\n                        handleAddToOrder={handleAddToOrder}\r\n                    ></Meal>)\r\n                }\r\n            </div>\r\n            <div className=\"order-list\">\r\n                <OrderList orders={orders}></OrderList>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Restaurant;","// use local storage to manage cart data\r\nconst addToDb = id =>{\r\n    let shoppingCart = {};\r\n\r\n    //get the shopping cart from local storage\r\n    const storedCart = localStorage.getItem('shopping-cart');\r\n    if(storedCart){\r\n        shoppingCart = JSON.parse(storedCart);\r\n    }\r\n\r\n    // add quantity\r\n    const quantity = shoppingCart[id];\r\n    if(quantity){\r\n        const newQuantity = quantity + 1;\r\n        shoppingCart[id] = newQuantity;\r\n    }\r\n    else{\r\n        shoppingCart[id] = 1;\r\n    }\r\n    localStorage.setItem('shopping-cart', JSON.stringify(shoppingCart));\r\n}\r\n\r\nconst getStoredCart = () =>{\r\n    let shoppingCart = {};\r\n\r\n    //get the shopping cart from local storage\r\n    const storedCart = localStorage.getItem('shopping-cart');\r\n    if(storedCart){\r\n        shoppingCart = JSON.parse(storedCart);\r\n    }\r\n    return shoppingCart;\r\n}\r\n\r\nconst removeFromDb = id =>{\r\n    const storedCart = localStorage.getItem('shopping-cart');\r\n    if(storedCart){\r\n        const shoppingCart = JSON.parse(storedCart);\r\n        if(id in shoppingCart){\r\n            delete shoppingCart[id];\r\n            localStorage.setItem('shopping-cart', JSON.stringify(shoppingCart));\r\n        }\r\n    }\r\n}\r\n\r\nconst deleteShoppingCart = () =>{\r\n    localStorage.removeItem('shopping-cart');\r\n}\r\n\r\nexport {\r\n    addToDb, \r\n    getStoredCart,\r\n    removeFromDb,\r\n    deleteShoppingCart\r\n}","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <h2>Welcome to My Restaurant</h2>\r\n            <h4>Please order the food you like</h4>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Restaurant from './components/Restaurant/Restaurant';\r\nimport Header from './components/Header/Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header></Header>\r\n      <Restaurant></Restaurant>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}